use crate::treepp::{script, Script};

use crate::bitvm20::utils::{verify_input_data,pop_bytes,data_to_signable_balke3_digits,reorder_blake3_output_for_le_bytes};

use crate::signatures::winternitz::PublicKey;

use crate::hash::blake3::blake3_var_length;

const levels : usize = 12; // number of elements in the merkel tree is 2^levels -> height being (levels+1)

// inputs are merkel proof (12 levels) {root, sibling1, sibling2, ... sibling_levels, entry, entry_index_bit0, entry_index_bit1 ... entry_index_bit(levels-1)} in bytes ((levels+1) * 32 + 74 + levels)
// and its signatures (i.e. hashes generated by sign_digits), in that order
pub fn construct_script2_3(winternitz_public_key: &PublicKey) -> Script {
    script!{
        { verify_input_data(&winternitz_public_key, (levels+1) * 32 + 74 + levels ) }

        // LOGIC STARTS HERE

        // move entry index to alt stack, hash the entry
        for _ in 0..levels {
            OP_TOALTSTACK
        }
        { blake3_var_length(32) }
        { reorder_blake3_output_for_le_bytes() }
        
        // iterate for levels number of types
        for _ in (1..=levels).rev() {
            OP_FROMALTSTACK
            OP_IF
                { blake3_var_length(64) }
                { reorder_blake3_output_for_le_bytes() } // hash in order
            OP_ELSE
                // swap the last 2, 32 byte elements
                for _ in 0..32 {
                    {63} OP_ROLL
                }
                { blake3_var_length(64) }
                { reorder_blake3_output_for_le_bytes() } // hash in reverse order
            OP_ENDIF
        }

        // compare the last 2 remaining roots
        // only returns true if lesser than 32 limbs are equal
        OP_0 OP_TOALTSTACK
        for i in 0..32 {
           {32-i} OP_ROLL OP_EQUAL
           OP_FROMALTSTACK OP_ADD OP_TOALTSTACK
        }
        OP_FROMALTSTACK
        {32} OP_EQUAL OP_NOT
    }
}