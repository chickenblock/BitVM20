use crate::treepp::{script, Script};

const levels : u32 = 12; // number of elements in the merkel tree is 2^levels -> height being (levels+1)

// inputs are merkel proof (15 levels) {root, sibling1, sibling2, ... sibling_levels, entry, entry_index_bit0, entry_index_bit1 ... entry_index_bit(levels-1)} in bytes ((levels+1) * 32 + 74 + levels)
// and its signatures (i.e. hashes generated by sign_digits), in that order
pub fn construct_script2_3(winternitz_private_key: String) -> Script {
    script!{
        { checksig_verify(winternitz_private_key) }
        // now we have the 20 bytes of the sha256 hash that was signed by the winternitz signatures

        // reverse these 20 bytes, and push each of these to altstack
        for i in 0..20 {
            {19 - i} OP_ROLL OP_TOALTSTACK
        }

        // find 32 byte sha256 hash of the (levels * 32 + 74 + levels) byte data on the stack, drop its first (32-20) excess bytes
        { sha256((levels+1) * 32 + 74 + levels) }
        for i in 0..(32-20) {
            OP_DROP
        }

        // compare both the hashes, if compare fails we quit with failure
        for i in 0..20 {
            OP_FROMALTSTACK
            OP_EQUALVERIFY
        }

        // LOGIC STARTS HERE

        // move entry index to alt stack, hash the entry
        for _ in 0..12 {
            OP_TOALTSTACK
        }
        {sha256(74)},
        
        // iterate for levels number of types
        for _ in (1..=levels).rev() {
            OP_FROMALTSTACK,
            OP_IF,
            {
                {sha256(32 * 2)} // hash in order
            }
            OP_ELSE,
            {
                // swap the last 2, 32 byte elements
                for _ in 0..32 {
                    {63}, OP_ROLL,
                }
                {sha256(32 * 2)} // hash reverse order
            }
            OP_ENDIF
        }

        // compare the last 2 remaining roots
        // only returns true if lesser than 32 limbs are equal
        OP_0 OP_TOALTSTACK
        for i in 0..32 {
           {32-i} OP_ROLL OP_EQUAL
           OP_FROMALTSTACK OP_ADD OP_TOALTSTACK
        }
        OP_FROMALTSTACK
        {32} OP_EQUAL OP_NOT
    }
}