use crate::treepp::{script, Script};

use crate::hash::sha256::sha256;

use crate::signatures::winternitz::checksig_verify;
use crate::signatures::winternitz::generate_public_key;

// inputs are Rx (32 bytes), Ry (32 bytes), s (32 bytes), public_key_y (32 bytes) and public_key_x (32 bytes) and its signatures (i.e. hashes generated by sign_digits), in that order
pub fn construct_script1(winternitz_private_key: &str) -> Script {

    let public_key = generate_public_key(winternitz_private_key);

    script!{
        { checksig_verify(&public_key) }
        // now we have the 20 bytes of the sha256 hash that was signed by the winternitz signatures

        // reverse these 20 bytes, and push each of these to altstack
        for i in 0..20 {
            {19 - i} OP_ROLL OP_TOALTSTACK
        }

        // find 32 byte sha256 hash of the 32*5 byte data on the stack, drop its first (32-20) excess bytes
        { sha256(32 * 5) }
        for i in 0..(32-20) {
            OP_DROP
        }

        // compare both the hashes, if compare fails we quit with failure
        for i in 0..20 {
            OP_FROMALTSTACK
            OP_EQUALVERIFY
        }

        // LOGIC STARTS HERE
        
        // signature verification
    }
}