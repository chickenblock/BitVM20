use crate::treepp::{script, Script};

// inputs are previous merkel state root in bytes and its signatures (i.e. hashes generated by sign_digits), in that order
pub fn construct_script1(winternitz_private_key: String, original_merkel_state_root : Vec<u8>) -> Script {
    script!{
        { checksig_verify(winternitz_private_key) }
        // now we have the 20 bytes of the sha256 hash that was signed by the winternitz signatures

        // reverse these 20 bytes, and push each of these to altstack
        for i in 0..20 {
            {19 - i} OP_ROLL OP_TOALTSTACK
        }

        // find 32 byte sha256 hash of the 32 byte data on the stack, drop its first (32-20) excess bytes
        { sha256(32) }
        for i in 0..(32-20) {
            OP_DROP
        }

        // compare both the hashes, if compare fails we quit with failure
        for i in 0..20 {
            OP_FROMALTSTACK
            OP_EQUALVERIFY
        }

        // LOGIC STARTS HERE
        
        // comparing the original_merkel_state_root with the one provided in data
        // only returns true if lesser than 32 limbs are equal
        OP_0 OP_TOALTSTACK
        for i in 0..32 {
            {original_merkel_state_root[31-i]} OP_EQUAL
            OP_FROMALTSTACK OP_ADD OP_TOALTSTACK
        }
        OP_FROMALTSTACK
        {32} OP_EQUAL OP_NOT
    }
}